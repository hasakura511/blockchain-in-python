class TransactionPool:
    def __init__(self):
        self.transaction_map = {}

    def set_transaction(self, transaction):
        """
        set a transaction in the transaction Transaction Pool
        """
        self.transaction_map[transaction.id] = transaction

    def existing_transaction(self, sender_address):
        """
        find a transaction generated by the sender_address in the transaction pool
        """

        # return the sender's transaction if exists
        for tx in self.transaction_map.values():
            if tx.input["address"] == sender_address:
                return tx
        # return None if no transaction

    def transaction_data(self):
        """
        return the transactions of the pool in their serialized form
        """
        return [t.to_json() for t in self.transaction_map.values()]

    def clear_blockchain_transactions(self, blockchain):
        """
        delete blockchain recorded transactions from the Pool
        """

        for block in blockchain.chain:
            for tx in block.data:
                try:
                    del self.transaction_map[tx["id"]]
                except KeyError:
                    pass
